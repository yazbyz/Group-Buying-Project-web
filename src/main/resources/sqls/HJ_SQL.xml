<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE  mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="HJ">

	<!-- 사용자 조회 -->
	<select id="getUser" parameterType="String" resultType="String">
		SELECT
		user_id
		FROM user
		WHERE email like '#{email}'
	</select>

	<!-- 사용자 삽입 -->
	<insert id="insertUser"
		parameterType="com.gbp.webprj.model.UserDto">
		INSERT INTO user
		VALUES(nickname, email, image,
		access_token, token_type,
		expires_in, id_token, suggest_rate,
		request_rate)
		ON DUPLICATE KEY UPDATE
		email='#{email}',
		image='#{image}',
		access_token='#{access_token}',
		token_type='#{token_type}',
		expires_in='#{expires_in}',
		id_token='#{id_token}',
		suggest_rate='#{suggest_rate}'
	</insert>

	<!-- 내정보 조회 -->
	<select id="getMyInfo" parameterType="String"
		resultType="com.gbp.webprj.model.UserDto">
		SELECT nickname, email, image, register_rate,
		suggester_rate
		FROM user
		WHERE user_id like '#{user_id}'
	</select>

	<!-- 내정보 수정 -->
	<update id="updateMyInfo"
		parameterType="com.gbp.webprj.model.UserDto">
		UPDATE user
		SET (nickname, email, image, register_rate,
		suggester_rate)
		= ('#{nickname}', '#{email}','#{image}',
		'#{register_rate}',
		'#{suggeter_rate}')
		where user_id like '#{user_id}'

	</update>

	<!-- 탈퇴 -->
	<delete id="deleteUser" parameterType="String">
		DELETE
		FROM user
		WHERE
		user_id like '#{user_id}'
	</delete>




	<!-- photo 테이블 조인 다시 확인하기??? -->

	<!-- List형태로 가져와야 할 것 같은데 잘 모르겠음.. -->
	<select id="getPosting"
		resultType="com.gbp.webprj.model.PostingDto">
		SELECT *
		FROM posting
		ORDER BY registeredAt DESC
	</select>


	<!-- 조인 된 테이블의 resultType은??? -->
	
	
	<!-- 내가 참여한 글 조회 -->
	<select id="getMyParticipatePosting"
		parameterType="com.gbp.webprj.model.PostingDto"
		resultType="com.gbp.webprj.model.PostingDto">
		SELECT po.*
		FROM posting AS po
		JOIN participation AS pa
		WHERE
		pa.positing_id = po.posting_id
		AND po.register_id like
		'#{register_id}'
		OR pa.requester_id like '#{requester_id}'
	</select>

	<!-- 내 글 중에 거래 진행 중인 글 조회 -->
	<select id="getMyParticipatePostingProgressOn"
		parameterType="com.gbp.webprj.model.PostingDto"
		resultType="com.gbp.webprj.model.PostingDto">
		SELECT mine.*
		FROM
		(SELECT *
		FROM posting AS po
		JOIN
		participation AS pa
		WHERE pa.positing_id = po.posting_id
		AND
		po.register_id like '' OR
		pa.requester_id like ''
		) AS mine
		WHERE
		mine.step like '진행중'
	</select>

	<!-- 내 글 중에 거래 종료된 글 조회 -->
	<select id="getMyParticipatePostingFinished"
		parameterType="com.gbp.webprj.model.PostingDto"
		resultType="com.gbp.webprj.model.PostingDto">
		SELECT mine.*
		FROM
		(SELECT *
		FROM posting AS po
		JOIN
		participation AS pa
		WHERE pa.positing_id = po.posting_id
		AND
		po.register_id like '#{register_id}' OR
		pa.requester_id like
		'#{requester_id}'
		) AS mine
		WHERE
		mine.step like '종료';
	</select>

	<!-- 내가 신청한 글 조회 -->
	<select id="getMyRequestPosting"
		resultType="com.gbp.webprj.model.PostingDto">
		SELECT mine.*
		FROM
		(SELECT
		FROM posting AS po
		JOIN
		participation AS pa
		WHERE pa.positing_id = po.posting_id
		AND
		pa.requester_id like ''
		) AS mine
	</select>

	<!-- 내가 작성한 글 조회 -->
	<select id="getMyWritePosting"
		resultType="com.gbp.webprj.model.PostingDto">
		SELECT *
		FROM posting
		WHERE requester_id like user_id;
	</select>

	<!-- 공동구매 글 작성 -->
	<insert id="insertPosting"
		parameterType="com.gbp.webprj.model.PostingDto">
		INSERT INTO posting (requester_id, title, content,
		category,
		matching, site, photo)
		VALUES (#{requester_id}, #{title},
		#{content}, #{category}, #{matching}, #{site}, #{photo});
	</insert>

	<!-- 공동구매 글 수정 -->
	<update id="updateMyPositing" parameterType="String">
		UPDATE posting
		SET
		(title, content, category, matching, site,
		photo) = ('#{title}',
		'#{content}', '#{category}', '#{matching}',
		'#{site}')
		WHERE user_id
		like '#{user_id}';
	</update>

	<!-- 공동구매 신청 -->
	<insert id="insertRequestParticipation"
		parameterType="com.gbp.webprj.model.ParticipationgDto">
		INSERT INTO participation (posting_id, requester_id,
		step,
		rate_suggester, rate_requester)
		VALUES (#{posting_id},
		#{requester_id}, '신청', #{rate_suggester}, #{rate_requester});
	</insert>

	<!-- 참가인원 계산 -->
	<select id="getParticipantCount" parameterType="String">
		SELECT
		count(participation_id)
		FROM participation
		WHERE posting_id =
		'#{posting_id}' AND step like '진행중';
	</select>

	<!-- 글 조회 -->
	<select id="getPostingAll"
		resultType="com.gbp.webprj.model.PostingDto">
		SELECT *
		FROM posting
		ORDER BY registeredAt DESC;
	</select>

	<!-- 댓글 작성 -->
	<insert id="insertComment"
		parameterType="com.gbp.webprj.model.CommentDto">
		INSERT INTO comment (user_id, posting_id, content)
		VALUES (#{user_id}, #{posting_id}, #{content});
	</insert>

	<!-- 댓글 수정 -->
	<update id="updateComment"
		parameterType="com.gbp.webprj.model.CommentDto">
		UPDATE comment
		SET (content) = ('#{content}')
		WHERE
		comment_id like '#{comment_id}';
	</update>

	<!-- 댓글 삭제(서비스 단에서 삭제상태를 가진 댓글은 가리기) -->
	<delete id="deleteComment">
		UPDATE comment
		SET (status) = ('delete')
		WHERE
		comment_id like '#{comment_id}';
	</delete>

	<!-- 댓글조회 -->
	<select id="getComment" parameterType="String"
		resultType="com.gbp.webprj.model.CommentDto">
		SELECT *
		FROM comment
		WHERE posting_id like '#{posting_id}'
		ORDER BY registeredAt ASC;

	</select>
</mapper>